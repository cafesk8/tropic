stages:
    - build
    - test
    - deploy
    - service

.only-default: &only-default
    rules:
        -   if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"'

.deploy: &deploy
    image:
        name: registry.shopsys.cz/devops/kubernetes-buildpack:1.1
    stage: deploy
    needs:
        - build
    tags:
        - docker
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never
    script:
        - docker create -ti --name image ${TAG} bash
        - docker cp image:/var/www/html/var/ ./
        - chmod +x ./deploy/deploy-project.sh && ./deploy/deploy-project.sh deploy

variables:
    TAG: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}

before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} ${CI_REGISTRY} --password-stdin

build:
    stage: build
    <<: *only-default
    tags:
        - docker
    script:
        - docker build -f ./docker/php-fpm/Dockerfile --target production --compress -t ${TAG} .
        - docker push ${TAG}

test:standards:
    stage: test
    <<: *only-default
    tags:
        - docker
    variables:
        GIT_STRATEGY: none
    script:
        - docker run -i ${TAG} /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev standards"

test:functional:
    image: tmaier/docker-compose:latest
    stage: test
    <<: *only-default
    tags:
        - docker
    script:
        - cp -f ./gitlab/docker-compose-ci.yml ./docker-compose.yml
        - docker-compose up -d
        - docker-compose exec -T php-fpm /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev db-create test-db-create build-demo-dev-quick error-pages-generate tests"

deploy:production:
    <<: *deploy
    resource_group: deploy_production
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never
        -   if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^master-.*$/'
            when: manual
            allow_failure: false
    environment:
        name: production
        url: https://${DOMAIN_HOSTNAME_1}
        kubernetes:
            namespace: ${PROJECT_NAME}

deploy:devel:
    <<: *deploy
    resource_group: deploy_devel
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never
        -   if: '$CI_COMMIT_BRANCH == "devel" || $CI_COMMIT_BRANCH =~ /^devel-.*$/'
    environment:
        name: devel
        url: https://${DOMAIN_HOSTNAME_1}
        kubernetes:
            namespace: ${PROJECT_NAME}

repository:clean:
    stage: service
    image: dwdraju/alpine-curl-jq
    tags:
        - docker
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
    before_script:
        - chmod +x ./gitlab/scripts/repository-clean.sh
    script:
        - ./gitlab/scripts/repository-clean.sh

security:check:
    stage: service
    tags:
        - docker
    needs:
        - build
    rules:
        -   if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
    script:
        - docker run -i ${TAG} composer security-check

