image: docker:19.03.1

services:
    -   name: docker:19.03.1-dind

stages:
    - build
    - test
    - review
    - deploy

.only-default: &only-default
    only:
        - branches
        - master

.deploy: &deploy
    image:
        name: shopsys/kubernetes-buildpack:0.4.0-dev
    stage: deploy
    needs:
        - build
    tags:
        - docker
    script:
        - docker create -ti --name image ${TAG} bash
        - docker cp image:/var/www/html/var/ ./
        - apk add --no-cache bash openvpn
        - openvpn --daemon --config $OVPN
        - sleep 10
        - mkdir -p /root/.kube/ && echo "${KUBE_CONFIG}" > /root/.kube/config
        - chmod +x ./deploy/deploy-project.sh && ./deploy/deploy-project.sh deploy

variables:
    TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    HOST: ${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
    HOSTS: ${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}, sk.${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}, en.${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
    COMPOSE_PROJECT_NAME: ${CI_PROJECT_NAME}__${CI_COMMIT_REF_SLUG}
    PRODUCTION_URL: ""
    DEVEL_URL: ""

before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

build:
    stage: build
    <<: *only-default
    tags:
        - docker
    script:
        - docker build -f ./docker/php-fpm/Dockerfile --target production --compress -t ${TAG} .
        - docker push ${TAG}

test:standards:
    stage: test
    <<: *only-default
    tags:
        - docker
    variables:
        GIT_STRATEGY: none
    script:
        - docker run -i ${TAG} /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev npm dirs-create test-dirs-create assets standards tests-unit tests-acceptance-build"

test:functional:
    image: tmaier/docker-compose:latest
    stage: test
    <<: *only-default
    tags:
        - docker
    script:
        - cp -f ./gitlab/docker-compose-ci.yml ./docker-compose.yml
        - docker pull ${TAG}
        - docker tag ${TAG} php-fpm
        - docker-compose up -d
        - docker-compose exec -T php-fpm /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev npm dirs-create test-dirs-create assets db-create test-db-create build-demo-dev-quick error-pages-generate tests"

review:
    stage: review
    environment:
        name: "review/${CI_COMMIT_REF_SLUG}"
        url: https://${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
        on_stop: review:stop
    variables:
        CI_NETWORK: ci_default
    needs:
        - build
    <<: *only-default
    script:
        - cp /home/ci/docker-compose-review.yml ./docker-compose.yml
        - docker-compose down --rmi all -v
        - docker-compose up -d
        - "docker-compose exec -T php-fpm sed -i \"s/database_name:.*/database_name: ${COMPOSE_PROJECT_NAME}/\" config/parameters.yml"
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.1:8000/https:\/\/${HOST}/g" config/domains_urls.yml
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.2:8000/https:\/\/sk.${HOST}/g" config/domains_urls.yml
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.3:8000/https:\/\/en.${HOST}/g" config/domains_urls.yml
        - docker-compose exec -T php-fpm php phing -D production.confirm.action=y clean db-create build-demo
    tags:
        - review

review:stop:
    stage: review
    variables:
        GIT_STRATEGY: none
        CI_NETWORK: ci_default
    tags:
        - review
    needs:
        - build
    script:
        - cp /home/ci/docker-compose-review.yml ./docker-compose.yml
        - docker-compose exec -T php-fpm php phing -D production.confirm.action=y product-search-delete-structure
        - docker-compose down --rmi all -v
        - /home/ci/clean.sh ${COMPOSE_PROJECT_NAME}
    when: manual
    only:
        - branches
    environment:
        name: review/${CI_COMMIT_REF_SLUG}
        action: stop

deploy:production:
    <<: *deploy
    when: manual
    allow_failure: false
    resource_group: deploy_production
    variables:
        DOCKER_HOST: tcp://docker:2375/
        KUBE_CONFIG: ${KUBE_CONFIG_PROD}
    only:
        - master
        - /^master-.*$/
    environment:
        name: production
        url: https://${DOMAIN_HOSTNAME_1}

deploy:devel:
    <<: *deploy
    resource_group: deploy_devel
    variables:
        DOCKER_HOST: tcp://docker:2375/
        KUBE_CONFIG: ${KUBE_CONFIG_DEVEL}
    only:
        - devel
        - /^devel-.*$/
    environment:
        name: devel
        url: https://${DOMAIN_HOSTNAME_1}

