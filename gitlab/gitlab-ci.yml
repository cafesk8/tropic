stages:
    - build
    - test
    - review
    - deploy
    - service

.only-default: &only-default
    rules:
        -   if: '$CI_COMMIT_BRANCH'
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never


.deploy: &deploy
    image:
        name: registry.shopsys.cz/devops/kubernetes-buildpack:1.0
    stage: deploy
    needs:
        - build
    tags:
        - docker
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never
    script:
        - docker create -ti --name image ${TAG} bash
        - docker cp image:/var/www/html/var/ ./
        - echo "${KUBE_CONFIG}" > /root/.kube/config
        - chmod +x ./deploy/deploy-project.sh && ./deploy/deploy-project.sh deploy

variables:
    TAG: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}
    HOST: ${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
    HOSTS: ${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}, sk.${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}, en.${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
    COMPOSE_PROJECT_NAME: ${CI_PROJECT_NAME}__${CI_COMMIT_REF_SLUG}

before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} ${CI_REGISTRY} --password-stdin

build:
    stage: build
    <<: *only-default
    tags:
        - docker
    script:
        - docker build -f ./docker/php-fpm/Dockerfile --target production --compress -t ${TAG} .
        - docker push ${TAG}

test:standards:
    stage: test
    <<: *only-default
    tags:
        - docker
    variables:
        GIT_STRATEGY: none
    script:
        - docker run -i ${TAG} /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev standards"

test:functional:
    image: tmaier/docker-compose:latest
    stage: test
    <<: *only-default
    tags:
        - docker
    script:
        - cp -f ./gitlab/docker-compose-ci.yml ./docker-compose.yml
        - docker-compose up -d
        - docker-compose exec -T php-fpm /bin/bash -c "mv PRODUCTION DEVELOPMENT; php phing composer-dev db-create test-db-create build-demo-dev-quick error-pages-generate tests"

review:
    stage: review
    environment:
        name: "review/${CI_COMMIT_REF_SLUG}"
        url: https://${CI_COMMIT_REF_SLUG}.${CI_PROJECT_NAME}.${REVIEW_URL}
        on_stop: review:stop
    needs:
        - build
    <<: *only-default
    script:
        - cp /home/ci/docker-compose-review.yml ./docker-compose.yml
        - docker-compose down --rmi all -v
        - docker-compose up -d
        - "docker-compose exec -T php-fpm sed -i \"s/database_name:.*/database_name: ${COMPOSE_PROJECT_NAME}/\" config/parameters.yaml"
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.1:8000/https:\/\/${HOST}/g" config/domains_urls.yaml
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.2:8000/https:\/\/sk.${HOST}/g" config/domains_urls.yaml
        - docker-compose exec -T php-fpm sed -i "s/http:\/\/127.0.0.3:8000/https:\/\/en.${HOST}/g" config/domains_urls.yaml
        - docker-compose exec -T php-fpm php phing -D production.confirm.action=y clean db-create build-demo
    tags:
        - review

review:stop:
    stage: review
    variables:
        GIT_STRATEGY: none
    needs:
        - build
    <<: *only-default
    tags:
        - review
    script:
        - cp /home/ci/docker-compose-review.yml ./docker-compose.yml
        - docker-compose exec -T php-fpm php phing -D production.confirm.action=y elasticsearch-index-delete
        - docker-compose down --rmi all -v
        - /home/ci/clean.sh ${COMPOSE_PROJECT_NAME}
    rules:
        -   if: '$CI_COMMIT_BRANCH'
            when: manual
            allow_failure: true
    environment:
        name: review/${CI_COMMIT_REF_SLUG}
        action: stop

deploy:production:
    <<: *deploy
    resource_group: deploy_production
    variables:
        KUBE_CONFIG: ${KUBE_CONFIG_PROD}
    rules:
        -   if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^master-.*$/'
            when: manual
            allow_failure: false
    environment:
        name: production
        url: https://${DOMAIN_HOSTNAME_1}

deploy:devel:
    <<: *deploy
    resource_group: deploy_devel
    variables:
        KUBE_CONFIG: ${KUBE_CONFIG_DEVEL}
    rules:
        -   if: '$CI_COMMIT_BRANCH == "devel" || $CI_COMMIT_BRANCH =~ /^devel-.*$/'
    environment:
        name: devel
        url: https://${DOMAIN_HOSTNAME_1}

repository:clean:
    stage: service
    image: dwdraju/alpine-curl-jq
    tags:
        - docker
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: always
        -   if: '$CI_PIPELINE_SOURCE != "schedule"'
            when: never
    before_script:
        - chmod +x ./gitlab/scripts/repository-clean.sh
    script:
        - ./gitlab/scripts/repository-clean.sh

security:check:
    stage: service
    tags:
        - docker
    needs:
        - build
    rules:
        -   if: '$CI_COMMIT_BRANCH == "master"'
        -   if: '$CI_PIPELINE_SOURCE == "schedule"'
            when: never
    script:
        - docker run -i ${TAG} composer security-check

