<?xml version="1.0" encoding="UTF-8"?>
<project name="Shopsys Framework" default="list">

    <property file="${project.basedir}/build/build.local.properties"/>

    <property name="path.root" value="${project.basedir}"/>
    <property name="path.vendor" value="${path.root}/vendor"/>
    <property name="path.framework" value="${path.vendor}/shopsys/framework"/>
    <property name="path.framework.assets" value="${path.root}/node_modules/@shopsys/framework"/>

    <property name="phpstan.level" value="4"/>
    <property name="check-and-fix-annotations" value="true"/>

    <import file="${path.vendor}/devops/kubernetes-deployment/build.xml"/>
    <import file="${path.framework}/build.xml"/>

    <target name="build-demo" depends="production-protection,wipe,build-version-generate,composer-prod,redis-check,npm,dirs-create,assets,db-demo,elasticsearch-index-recreate,elasticsearch-export,error-pages-generate,warmup,clean-redis-old" description="Builds application for production with clean demo DB."/>

    <target name="tests-acceptance">
        <echo level="info" message="Acceptance tests are turned off on this project"/>
    </target>

    <target name="cron-default" description="Runs default background jobs. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:cron" />
            <arg value="--instance-name=default" />
        </exec>
    </target>

    <target name="cron-products" description="Runs products background jobs. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:cron" />
            <arg value="--instance-name=products" />
        </exec>
    </target>

    <target name="cron-orders" description="Runs orders background jobs. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:cron" />
            <arg value="--instance-name=orders" />
        </exec>
    </target>

    <target name="cron-images" description="Runs images tranfers. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:cron" />
            <arg value="--instance-name=images" />
        </exec>
    </target>

    <target name="cron-stocks" description="Runs external stocks tranfers. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:cron" />
            <arg value="--instance-name=stocks" />
        </exec>
    </target>

    <target name="tests" depends="test-db-demo,test-elasticsearch-index-recreate,test-elasticsearch-export,tests-unit" description="Runs unit, functional and smoke tests. Builds new test database in the process.">
        <phingcall target="tests-functional"/>
        <phingcall target="tests-smoke"/>
    </target>

    <target name="build-deploy-part-2-db-dependent" depends="elasticsearch-index-migrate,redis-check,db-migrations-count-with-maintenance,db-migrations,domains-data-create,friendly-urls-generate,domains-urls-replace,error-pages-generate,warmup" description="Second part of application build for production preserving your DB (must be run with maintenance page when containing DB migrations)."/>

    <target name="clean-all" description="An alias for clean-cache">
        <phingcall target="clean-cache"/>
    </target>

<!-- phpstan target is overridden to setup higher memory limit. see https://github.com/shopsys/shopsys/issues/1614 -->
    <target name="phpstan" depends="tests-acceptance-build" description="Performs static analysis of PHP files using PHPStan." hidden="true">
        <exec executable="${path.phpstan.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="analyze"/>

            <arg value="-c"/>
            <arg path="${path.phpstan.config}"/>

            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>

            <arg value="--level=${phpstan.level}"/>
            <arg value="--memory-limit=2G"/>
            <arg value="-vvv"/>
        </exec>
    </target>

    <target name="tests-unit" depends="production-protection,clean" description="Runs unit tests.">
        <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Unit"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="environment-change" depends="production-protection" description="Change application environment with installing environment related dependencies.">
        <input propertyName="change.environment" validArgs="dev,prod,test" defaultValue="dev" message="Select environment you want to change to"/>
        <phingcall target="maintenance-on" />
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:environment:change" />
            <arg value="${change.environment}" />
        </exec>
        <if>
            <equals arg1="${change.environment}" arg2="prod"/>
            <then>
                <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="install"/>
                    <arg value="--no-dev"/>
                    <arg value="--no-scripts"/>
                </exec>
            </then>
            <else>
                <phingcall target="composer-check" />
                <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="install"/>
                    <arg value="--no-scripts"/>
                </exec>
            </else>
        </if>
        <phingcall target="clean-cache" />
        <phingcall target="maintenance-off" />
    </target>

    <target name="security-check" description="Runs security checks for dependencies with known security vulnerabilities">
        <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="security-check"/>
        </exec>
    </target>
</project>
